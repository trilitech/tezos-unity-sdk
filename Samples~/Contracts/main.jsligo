// https://gitlab.com/ligolang/contract-catalogue/-/blob/main/lib/fa2/asset/multi_asset.jsligo

#import "mint.jsligo" "Mint"

#import "login.jsligo" "Login"

#import "item.jsligo" "Item"

#import "FA2/storage.jsligo" "Storage"

#import "FA2/transfer.jsligo" "Transfer"

#import "FA2/balance_of.jsligo" "BalanceOf"

#import "FA2/update_ops.jsligo" "UpdateOps"

#import "FA2/metadata.jsligo" "TokenMetadata"

#import "FA2/marketplace.jsligo" "Marketplace"

#import "FA2/operators.jsligo" "Operators"

type storage = Storage.t;

type token_id = nat;

type amount = nat;

type currency = nat;

type price = nat;

type item = Item.t;

type itemSet = set<[item, amount]>;

type marketToken = [address, token_id];

type marketPrice = [currency, price];

// data format for inventory View

type view_inventory_result = { id: int, amount: int, item: Item.t };

// data format for marketplace View

type view_marketplace_result = {
   id: int,
   owner: address,
   currency: int,
   price: int,
   item: Item.t
};

type login_param = Login.login_param;

type mint_param = Mint.mint_param;

type set_meta_param = TokenMetadata.data;

type add_to_market_param = Marketplace.add_to_market_param;

type remove_from_market_param = Marketplace.remove_from_market_param;

type buy_param = Marketplace.buy_param;

type transfer_param = Transfer.transfer_param;

type balance_of_param = BalanceOf.balance_of_param;

type update_operators_param = UpdateOps.update_operators_param;

type ret = [list<operation>, storage];

@entry const login = (p: login_param, s: storage): ret => Login.login(p, s);

@entry const mint = (p: mint_param, s: storage): ret => Mint.mint(p, s);

// Marketplace interaction

@entry
const add_to_market = (p: add_to_market_param, s: storage): ret => {
   let caller = Tezos.get_sender();
   TokenMetadata.assert_token_exist(s.token_metadata, p.token_id);
   Operators.assert_authorisation([s.operators, caller, p.token_id]);
   let new_marketplace = Marketplace.add_to_market(p, s.marketplace);
   let new_storage = Storage.set_marketplace([s, new_marketplace]);
   return [list([]), new_storage];
};

@entry
const remove_from_market = (p: remove_from_market_param, s: storage): ret => {
   let caller = Tezos.get_sender();
   const [_, token_id] = p;
   TokenMetadata.assert_token_exist(s.token_metadata, token_id);
   Operators.assert_authorisation([s.operators, caller, token_id]);
   let new_marketplace = Marketplace.remove_from_market(p, s.marketplace);
   let new_storage = Storage.set_marketplace([s, new_marketplace]);
   return [list([]), new_storage];
};

@entry
const buy = (p: buy_param, s: storage): ret => Transfer.marketplace_buy([p, s]);

// FA2 interface

@entry
const transfer = (p: transfer_param, s: storage): ret =>
   Transfer.transfer([p, s]);

@entry
const balance_of = (p: balance_of_param, s: storage): ret =>
   BalanceOf.balance_of([p, s]);

@entry
const update_operators = (p: update_operators_param, s: storage): ret =>
   UpdateOps.update_ops([p, s]);

// utility

@entry
const set_meta = (p: set_meta_param, s: storage): ret =>
   Storage.set_token_metadata([p, s]);

// "Humanize" are utility functions, used to parse data to human-readable objects
// Humanize utility function do not need to execute any code, because they are never actually called

@entry
const humanize_item = (_p: item, _s: storage): ret =>
   failwith("Netezos use only");

@entry
const humanize_inventory = (_p: set<view_inventory_result>, _s: storage): ret =>
   failwith("Netezos use only");

@entry
const humanize_item_on_market = (_p: bool, _s: storage): ret =>
   failwith("Netezos use only");

@entry
const humanize_items_on_market = (_p: set<[nat, bool]>, _s: storage): ret =>
   failwith("Netezos use only");

@entry
const humanize_marketplace = (_p: set<view_marketplace_result>, _s: storage): ret =>
   failwith("Netezos use only");

@view
const get_balance = (p: [address, nat], s: storage): nat => {
   const [owner, token_id] = p;
   return Storage.get_balance(s, owner, token_id);
};

@view
const is_operator = (op: Operators.operator_info, s: storage): bool =>
   Operators.is_operator([s.operators, op.owner, op.operator, op.token_id]);

@view
const total_supply = (token_id: nat, s: storage): nat => {
   TokenMetadata.assert_token_exist(s.token_metadata, token_id);
   return (1 as nat);
};

@view
const token_metadata = (p: nat, s: storage): TokenMetadata.data =>
   TokenMetadata.get_token_metadata([p, s.token_metadata]);

@view
const view_item_meta = (token_id: nat, s: storage): item => {
   let meta =
      match(Big_map.find_opt(token_id, s.token_metadata)) {
         when (Some(data)):
            data
         when (None()):
            failwith("Meta not found")
      };
   let info =
      match(Map.find_opt("item", meta.token_info)) {
         when (Some(info)):
            info
         when (None()):
            failwith("Property not found")
      };
   let item =
      match(Bytes.unpack(info) as option<item>) {
         when (Some(it)):
            it
         when (None()):
            failwith("Could not unpack")
      };
   return item;
};

@view
const view_items_of = (owner: address, s: storage): set<view_inventory_result> => {
   let inv =
      match(Big_map.find_opt(owner, s.ledger)) {
         when (Some(m)):
            m
         when (None()):
            Map.empty
      };
   return Map.fold(
      (
         [acc, [token_id, amount]]: [
            set<view_inventory_result>,
            [token_id, amount]
         ]
      ) => {
         if (amount > (0 as nat)) {
            let meta =
               match(Big_map.find_opt(token_id, s.token_metadata)) {
                  when (Some(data)):
                     data
                  when (None()):
                     failwith("Meta not found")
               };
            let info =
               match(Map.find_opt("item", meta.token_info)) {
                  when (Some(info)):
                     info
                  when (None()):
                     failwith("Property not found")
               };
            let item =
               match(Bytes.unpack(info) as option<item>) {
                  when (Some(it)):
                     it
                  when (None()):
                     failwith("Could not unpack")
               };
            let result: view_inventory_result = {
               id: int(token_id),
               amount: int(amount),
               item: item
            };
            return Set.add(result, acc);
         }
         return acc;
      },
      inv,
      Set.empty
   );
};

@view
const view_items_on_market = (_p: unit, s: storage): set<
   view_marketplace_result
> => {
   return Map.fold(
      (
         [acc, [marketToken, marketPrice]]: [
            set<view_marketplace_result>,
            [marketToken, marketPrice]
         ]
      ) => {
         const [owner, token_id] = marketToken;
         const [currency, price] = marketPrice;
         let meta =
            match(Big_map.find_opt(token_id, s.token_metadata)) {
               when (Some(data)):
                  data
               when (None()):
                  failwith("Meta not found")
            };
         let info =
            match(Map.find_opt("item", meta.token_info)) {
               when (Some(info)):
                  info
               when (None()):
                  failwith("Property not found")
            };
         let item =
            match(Bytes.unpack(info) as option<item>) {
               when (Some(it)):
                  it
               when (None()):
                  failwith("Could not unpack")
            };
         let result: view_marketplace_result = {
            id: int(token_id),
            owner: owner,
            currency: int(currency),
            price: int(price),
            item: item
         };
         return Set.add(result, acc);
      },
      s.marketplace,
      Set.empty
   );
};

@view
const is_item_on_market = (p: [address, nat], s: storage): bool =>
   Map.mem(p, s.marketplace);

@view
const is_items_on_market = (p: [address, list<nat>], s: storage): set<
   [nat, bool]
> =>
   List.fold(
      ([acc, token_id]: [set<[nat, bool]>, nat]) => {
         let is_present = Map.mem([p[0], token_id], s.marketplace);
         return Set.add([token_id, is_present], acc);
      },
      p[1],
      Set.empty
   );

// @ view
//const item_metadata = ([p, s] : [nat, storage]) : bytes =>
//   token_metadata(p, s).token_info["item"];
// @ view
//const all_tokens = ([_, s] : [unit , storage]) : list<nat> => s.token_ids;
